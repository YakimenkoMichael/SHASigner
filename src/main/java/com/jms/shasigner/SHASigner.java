package com.jms.shasigner;

import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.HashMap;

public class SHASigner {
    private static final HashMap<String, String> PRIVATE_KEYS = new HashMap<>(3);

    static {
        PRIVATE_KEYS.put("AA", "308204BC020100300D06092A864886F70D0101010500048204A6308204A20201000282010100C289ACC4" +
                "7320964AB4C312BC487CBBC34CB9314409F078EC6DC02B2A79DD3943AA103CB3035D6096A2335A08A109A2AB72" +
                "D9B297D4D90BF3D1CA3BF0DD18F9A0AB8A2B18A5A9CA6E390AE80151CB514DB16E4AC8B37B118F5561EA575F27" +
                "C910E38E6A58FFBF8BBC8E453E9CF827198F06C83F20E9EE3C513A218FED71F6E343A488BA5ACCD09FF7F725F2" +
                "A9B69D36555381A61085C007DE5936FA9CD4266883FA2559BE1C219C067ABE1CACB7F9E65FE656B58BDE346EF8" +
                "889A8C2190852EAC7F84F4CECADF86829D89A2FF3EA48AD2E7B8E246AA014A28A89AFCE4C616EE54065441CCCF" +
                "8E5D46DB5FD2FCAFE75E7E0F8361416A2D03CDBDCFB5052F17C7D9020301000102820100695BF30BFA663DBF7C" +
                "22E274C2B57B638C9C080897717BAC60CC61148227C429D7632FDCAC07D895FC86DF4E291974D6723F61304600" +
                "BF2E70029D7017EEBCD3BDD3F8FF4249B0EEFD49E0D946195D913C75455F69854FBF5738CE983F5AE6D494C9BE" +
                "E330AFE6D85A1D3A89FD04001DAC48AB9801DA1B24CADCFE7C54EAA7AE3B23F0F02BCA8ABBA9F508FDD1113855" +
                "585A78A1C88011BE50BA61453376F296D55A5DC0D7BEAAA4A8B3DCA14EC533E433BC3F76B6A50C29E5D2EC1807" +
                "B99350A63E428C78A2859AD56B00966EF3431101223714C8FA86DF9ABACC478FEA7D906093D364C02A94ED231E" +
                "E019682BC28C2D0506524EC4CC643BFEFA450936E50102818100E0E54DB63659659C4796BA45A49938A7C49785" +
                "A612C05E702B92C5E2733E5EA1769247A406597A12CDE627E8F674B0BF65148A6EC96934D8F1C05A2C807D973B" +
                "D808C59DB34DD46342DC15417A71741EF21A7CDE1E22887331C10E54C24EB0685A876A2AF039E6378B30D9715F" +
                "A18D7BB4F8AF86D341DD1FCA07CC68703BD1A902818100DD71836EFE647C73AF17C29E88CC3A724092E7F81471" +
                "ACD146428522C7FC76C7D0523542E1ED727DC8DA66142DF2FE40F8941F59AE048467BA88A6BFD9A67D5448939E" +
                "84B832CE7C934FC3309B610BE9421EB8197B8F7A640D75A466B342F92A377D79F01DDA43643F434E2154D295A6" +
                "A0DE89758B328F8E5827D180DDA482B1028180202AEC48A9D173A53CE024589DC884C00A7099DF3D4362BEAC9C" +
                "DBCD1E2AC7A254B16BA9DC76A3ED58A219074B693976C6E07F44856E94EE8AF5B6703318C3AEFDA1939290F90A" +
                "EDFFBC37161C8B69CE9B568A91C2C1B1BEB85922D1A0D15C8E3094B9ECD65B91C0541A729FB2CC0ACEACFDFD2D" +
                "4DBE58009A072F87A8B605B10281801BE8E6ABE29C3FA344FA35A94D8C90013E6A459A5AD948F2C76C32E38359" +
                "2A8F5C8E3FF042116F50B333F391AF88E4CAC389C7B9C1D907E71AF7862CBFFDDFE5F38FC776EAD05C7E0F030A" +
                "92E1C28581CCB79A747BC245A6BE9B8930F87F047071B5FADC6CA6C9BFA4C992DB5899820B125379F7BAA790B8" +
                "5C1C08A7B947B6C10281806406890D9CAFB3CF5BAED115779FA170383FE68ACAED3C058D191F3B468C6B58CD67" +
                "504CD59AA2AA83C8B229361ACCB87C0E1AAA53719E55D5A4F7667BF3DC497C6D9809198BA77AEBECAAA1000C06" +
                "9FFD996DC2CD98C7C728819AC0D23C864F9E2D8F83BF981171743B8DD052D05256E65966E5F1995A827E05B122" +
                "A3660F1E");
    }

    public static PrivateKey getPrivateKey(String partner) throws Exception {
        final String privateKeyHex = PRIVATE_KEYS.get(partner.toUpperCase());
        if (privateKeyHex == null) {
            throw new RuntimeException("Private key for partner " + partner + " was not found");
        }

        byte[] privateKey = Hex.decodeHex(privateKeyHex.toCharArray());

        PKCS8EncodedKeySpec privSpec = new PKCS8EncodedKeySpec(privateKey);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePrivate(privSpec);
    }

    public static byte[] sign(PrivateKey key, byte[] message) {
        return sign(key, "SHA1withRSA", message);
    }

    public static byte[] sign512(PrivateKey key, byte[] message) {
        return sign(key, "SHA512withRSA", message);
    }

    private static byte[] sign(PrivateKey key, String algoritm, byte[] message) {
        if (message == null || message.length == 0)
            return new byte[0];

        try {
            Signature signer = Signature.getInstance(algoritm);
            signer.initSign(key);
            signer.update(message);
            return signer.sign();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (SignatureException e) {
            throw new RuntimeException(e);
        } catch (InvalidKeyException e) {
            throw new RuntimeException(e);
        }
    }
}
